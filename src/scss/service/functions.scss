@function getInfinity($start, $infinity) {
  $media: $start;

  @if type-of($infinity) == bool {
    @return $media;
  } @else if type-of($infinity) == number {
    @return '#{$media} and (max-width: #{$infinity})';
  } @else if type-of($infinity) == string {
    @return '#{$media} and (max-width: #{getSize($infinity)})';
  }
}

@function golden-ratio($num) {
  @return round($num * $golden-ratio * 100) / 100;
}

@function getSize($string) {
  @if $string == 'xxs' {
    @return $xxs;
  } @else if $string == 'xs' {
    @return $xs;
  } @else if $string == 'sm' {
    @return $sm;
  } @else if $string == 'md' {
    @return $md - 1;
  } @else if $string == 'lg' {
    @return $lg - 1;
  } @else if $string == 'xl' {
    @return $xl - 1;
  } @else if $string == 'xxl' {
    @return $xxl - 1;
  }
}

@function clear-units($value) {
  @if type-of($value) == 'number' {
    @if (unitless($value)) {
      @return $value;
    } @else if unit($value) == 'em' {
      @return $value / 1em;
    } @else if unit($value) == 'px' {
      @return $value / 1px;
    } @else if unit($value) == 'pt' {
      @return $value / 1pt;
    }
  } @else {
    @warn "Not a number value: #{$value}";
    @return $value;
  }
}

@function string2number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);
}

@function value2unit($value) {
  @if type-of($value) != 'string' {
    @error 'Value for `to-unit` should be a string.';
  }

  $units: (
    'px': 1px,
    'cm': 1cm,
    'mm': 1mm,
    '%': 1%,
    'ch': 1ch,
    'pc': 1pc,
    'in': 1in,
    'em': 1em,
    'rem': 1rem,
    'pt': 1pt,
    'ex': 1ex,
    'vw': 1vw,
    'vh': 1vh,
    'vmin': 1vmin,
    'vmax': 1vmax,
  );
  $parsed-unit: false;

  @each $unit in $units {
    @if (str-index($value, nth($unit, 1))) {
      $parsed-unit: nth($unit, 2);
    }
  }

  @if (not $parsed-unit) {
    @error 'Invalid unit `#{$value}`.';
  }

  @return $parsed-unit;
}

@function px2em($size, $base-size: $font-size) {
  $size: clear-units($size);
  $base-size: clear-units($base-size);
  $result: round($size / $base-size * 100) / 100;
  @return #{$result}em;
}

@function resize($size, $percentage) {
  @return $size * $percentage;
}
